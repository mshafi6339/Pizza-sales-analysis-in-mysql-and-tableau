-- Bussiness Problems solution

-- Total Revenue by Pizza Category:
-- Problem 1: What is the total revenue generated by each pizza category (e.g., Classic, -- --- -- Chicken, Veggie, Supreme)?
select * from order_details;
select * from pizza_types;
select * from pizzas;
select pt.category , sum(p.price*od.quantity)  as revenue from
order_details as od join pizzas as p on od.pizza_id=p.pizza_id 
join pizza_types  as pt on pt.pizza_type_id=p.pizza_type_id
group by pt.category 
order by revenue desc;

-- -------------------------------------------------------------------------------
-- Problem 2 :Daily Cumulative Revenue:
-- Problem: Calculate the daily total revenue and the running cumulative total revenue over the entire dataset's period.
select * from order_details;
select * from pizza_types;
select * from pizzas;
select * from orders;
select o.date , sum(p.price*od.quantity) as daily_revenue ,
sum(sum(p.price*od.quantity)) over (order by o.date) as running_total
 from order_details
as od join 
orders as o on od.order_id= o.order_id 
join pizzas as p on p.pizza_id = od.pizza_id 
group by o.date;

-- -----------------------------------------------------------------------------------

-- Top 5 Bestselling Pizzas by Revenue:

-- Problem: Identify the top 5 individual pizza names (e.g., 'The Barbecue Chicken Pizza', 'The Classic Deluxe Pizza') that have generated the highest total revenue.
select * from order_details;
select * from pizza_types;
select * from pizzas;
select * from orders;
select pt.name , sum(p.price*od.quantity)  as revenue
from pizza_types as pt join pizzas as p on pt.pizza_type_id = p.pizza_type_id
join order_details as od on od.pizza_id= p.pizza_id
group by pt.name 
order by revenue desc 
limit 5
offset 0;

-- ------------------------------------------------------------------------------------
-- Average Order Value Per Month:
-- Problem: What is the average monetary value of an order for each month
select * from order_details;
select * from pizza_types;
select * from pizzas;
select * from orders;
WITH OrderTotals AS (
    SELECT
        o.order_id,
        o.date,
        SUM(od.quantity * p.price) AS total_order_value
    FROM
        order_details AS od
    JOIN
        orders AS o ON od.order_id = o.order_id
    JOIN
        pizzas AS p ON od.pizza_id = p.pizza_id
    GROUP BY
        o.order_id, o.date 
)
SELECT
    EXTRACT(MONTH FROM ot.date) AS MonthNo,
    CASE EXTRACT(MONTH FROM ot.date)
        WHEN 1 THEN 'January'
        WHEN 2 THEN 'February'
        WHEN 3 THEN 'March' -- 
        WHEN 4 THEN 'April'
        WHEN 5 THEN 'May'
        WHEN 6 THEN 'June'
        WHEN 7 THEN 'July'
        WHEN 8 THEN 'August'
        WHEN 9 THEN 'September'
        WHEN 10 THEN 'October'
        WHEN 11 THEN 'November'
        WHEN 12 THEN 'December'
    END AS MonthName,
    AVG(ot.total_order_value) AS Avg_Order_Value -- Now averaging the *total value of each order*
FROM
    OrderTotals AS ot
GROUP BY
    MonthNo , MonthName 
ORDER BY
    MonthNo;
    
    
-- ---------------------------------------------------------------------------------
-- Problem No 5
-- Peak Ordering Hours:
-- Problem: Determine which hour of the day experiences the highest volume of orders.
 select hour(o.time) as Hours , count(o.order_id)  as Order_made
 from orders as o
 group by Hours 
 order by Order_made desc
 limit 5;

-- ----------------------------------------------------------------------
-- Unordered Pizza Types:

-- Problem: List all pizza types that have never been ordered throughout the recorded period.
select pt.pizza_type_id from pizza_types as pt
join pizzas as p on pt.pizza_type_id=p.pizza_type_id
join order_details as od on od.pizza_id=p.pizza_id
where od.order_id is null;

-- ---------------------------------------------------------------------------------------------
-- problem 7
-- Rank Pizzas by Quantity Sold within Each Category:
-- Problem: For each pizza category, rank the individual pizzas based on the total quantity sold, from most to least.
 with pizzasale as 
 ( select pizza_types.category as category , pizza_types.name as name , sum(order_details.quantity) as quantitysold from pizza_types
 join pizzas on pizza_types.pizza_type_id=pizzas.pizza_type_id
 join order_details on pizzas.pizza_id = order_details.pizza_id
 group by pizza_types.category ,
 pizza_types.pizza_type_id
 order by pizza_types.category
 )
 select pizzasale.category , pizzasale.name , dense_rank() over (partition by category order by quantitysold )
 from pizzasale
 order by category , quantitysold desc;
 
 -- ----------------------------------------------------------------------------------------------------
-- Problem No 8:
 -- Month-over-Month Revenue Growth Rate:
-- Problem: Calculate the percentage growth or decline in total revenue from one month to the next.
use pizza_sale;
select * from order_details;
select * from pizza_types;
select * from pizzas;
select * from orders;
WITH sale_with_previous_sales AS (
    SELECT
        MONTH(o.date) AS month,
        SUM(p.price * od.quantity) AS sales,
        -- Corrected LAG function: Added ORDER BY to the OVER clause
        LAG(SUM(p.price * od.quantity), 1) OVER (ORDER BY MONTH(o.date)) AS previous_sales
    FROM
        orders AS o
    INNER JOIN
        order_details AS od ON o.order_id = od.order_id
    INNER JOIN
        pizzas AS p ON od.pizza_id = p.pizza_id
    GROUP BY
        MONTH(o.date)
    ORDER BY
        MONTH(o.date) 
)
SELECT
    swps.month,
    swps.sales,
    swps.previous_sales,
    CASE
        WHEN swps.previous_sales IS NULL THEN 'N/A' -- Handle the first month
        WHEN swps.previous_sales = 0 THEN
            CASE
                WHEN swps.sales > 0 THEN 'Infinite Growth' -- Sales grew from zero
                WHEN swps.sales = 0 THEN '0.00%' -- Sales remained zero
                ELSE 'Infinite Decline' -- Sales went negative from zero
            END
        ELSE
            -- Corrected growth calculation: ((Current - Previous) / Previous) * 100
            CONCAT(ROUND(((swps.sales - swps.previous_sales) / swps.previous_sales) * 100, 2), '%')
    END AS growth_percentage -- Renamed alias for clarity
FROM
    sale_with_previous_sales AS swps
ORDER BY
    swps.month;

--  -------------------------------------------------------------------------------------------
-- 9 Orders with Mixed Pizza Sizes:
-- Problem: Identify order_ids where an order includes pizzas of at least two different sizes (e.g., an order containing both a 'Small' and a 'Large' pizza).

SELECT
    o.order_id
FROM
    orders AS o
INNER JOIN
    order_details AS od ON o.order_id = od.order_id
INNER JOIN
    pizzas AS p ON od.pizza_id = p.pizza_id
WHERE
    p.size IN ('L', 'S') -- Filter to only consider pizzas of size 'L' or 'S'
GROUP BY
    o.order_id
HAVING
    COUNT(DISTINCT p.size) >= 2; -- This condition ensures at least two different sizes (from 'L' or 'S') per order


 -- ///////////////////////////////////////////////////////////////////////////////////////////////
 -- Average Price per Pizza Category:
-- Problem: Calculate the average price of a pizza within each category.
 select * from order_details;
select * from pizza_types;
select * from pizzas;
select * from orders;
select pt.category,  avg(p.price) as average_category_price
from pizza_types  as pt inner join pizzas as p on pt.pizza_type_id = p.pizza_type_id
group by pt.category order by average_category_price;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-- Orders with the Most Diverse Pizza Types:
-- Problem: Find the order_ids of the top 3 orders that contained the highest number of unique pizza pizza_type_ids.
WITH OrderUniquePizzaTypes AS (
    SELECT
        od.order_id,
        COUNT(DISTINCT p.pizza_type_id) AS unique_pizza_type_count
    FROM
        order_details AS od
    INNER JOIN
        pizzas AS p ON od.pizza_id = p.pizza_id 
    GROUP BY
        od.order_id
),
RankedOrders AS (

    SELECT
        order_id,
        unique_pizza_type_count,
        DENSE_RANK() OVER (ORDER BY unique_pizza_type_count DESC) AS order_rank
    FROM
        OrderUniquePizzaTypes
)
SELECT
    order_id,
    unique_pizza_type_count
FROM
    RankedOrders
WHERE
    order_rank <= 3
ORDER BY
    order_rank ASC, unique_pizza_type_count DESC;
-- -----------------------------------------------------------------------------------------------------------------------
-- Sales Contribution by Pizza Size:
-- Problem: What percentage of the total overall revenue does each pizza size (S, M, L, XL, XXL) contribute?
with sizewithrevenue as
(select p.size as size1 , sum(p.price*od.quantity) as pizza_sale 
from order_details as od inner join pizzas as p on od.pizza_id = p.pizza_id 
group by p.size
order by pizza_sale )
select size1 ,  (pizza_sale/(select sum(pizza_sale) from sizewithrevenue))*100 percent_contribution from sizewithrevenue
order by percent_contribution desc;
-- ------------------------------------------------------------------------------------------------------------------
-- Most Frequently Ordered Pizza Categories:
-- Problem: List the pizza categories in descending order of how many times they appeared in orders (based on quantity sold).
select pt.category , sum(od.quantity) as quantity_of_category  from pizzas as p  inner join  pizza_types as pt on  pt.pizza_type_id = p.pizza_type_id
inner join order_details as od  on p.pizza_id = od.pizza_id 
group by pt.category
order by quantity_of_category desc;
-- --------------------------------------------------------------------------------------------------------------
-- Daily Order Volume Anomaly Detection (vs. Weekly Average):
-- Problem: For each day, compare the number of orders on that specific day with the average number of orders on the same day of the week (e.g., Tuesday's orders vs. average of all Tuesdays).

WITH DailyOrderCounts AS (
    -- Step 1: Calculate the total number of orders for each unique day
    SELECT
        DATE(o.date) AS order_date,
        DAYOFWEEK(o.date) AS weekday_number, -- DAYOFWEEK returns 1 for Sunday, 2 for Monday, ..., 7 for Saturday
        COUNT(o.order_id) AS daily_order_volume
    FROM
        orders AS o
    GROUP BY
        DATE(o.date)
),
WeekdayAverageOrderCounts AS (
    -- Step 2: Calculate the average daily order volume for each day of the week
    SELECT
        weekday_number,
        AVG(daily_order_volume) AS average_weekday_volume
    FROM
        DailyOrderCounts
    GROUP BY
        weekday_number
)
-- Step 3: Join the daily counts with the weekday averages and calculate the difference
SELECT
    doc.order_date,
    -- Convert weekday number to a more readable name
    CASE
        WHEN doc.weekday_number = 1 THEN 'Sunday'
        WHEN doc.weekday_number = 2 THEN 'Monday'
        WHEN doc.weekday_number = 3 THEN 'Tuesday'
        WHEN doc.weekday_number = 4 THEN 'Wednesday'
        WHEN doc.weekday_number = 5 THEN 'Thursday'
        WHEN doc.weekday_number = 6 THEN 'Friday'
        WHEN doc.weekday_number = 7 THEN 'Saturday'
    END AS day_of_week_name,
    doc.daily_order_volume,
    wac.average_weekday_volume,
    -- Calculate the difference from the average
    (doc.daily_order_volume - wac.average_weekday_volume) AS volume_difference_from_average,
    -- Calculate the percentage difference from the average
    ROUND(((doc.daily_order_volume - wac.average_weekday_volume) / wac.average_weekday_volume) * 100, 2) AS percentage_difference_from_average
FROM
    DailyOrderCounts doc
JOIN
    WeekdayAverageOrderCounts wac ON doc.weekday_number = wac.weekday_number
ORDER BY
    doc.order_date;
    
    
-- ------------------------------------------------------------------------------------------------------


